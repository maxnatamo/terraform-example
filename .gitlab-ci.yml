stages:
  - prepare
  - validate
  - plan
  - deploy

.terraform-base:
  image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
  variables:
    # Terraform init-flags
    TF_ROOT: ${CI_PROJECT_DIR}
    TF_STATE_NAME: tf_state
    TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${TF_STATE_NAME}
    TF_INIT_FLAGS: -lockfile=readonly

    # Terraform managed state
    TF_VAR_remote_state_address: ${TF_ADDRESS}
    TF_VAR_remote_state_username: gitlab-ci-token
    TF_VAR_remote_state_access_token: ${CI_JOB_TOKEN}

    # Terraform configuration flags
    TF_VAR_host: ${TF_VAR_HOST}
    TF_VAR_client_cert: ${TF_VAR_CLIENT_CERT}
    TF_VAR_client_key: ${TF_VAR_CLIENT_KEY}
    TF_VAR_cluster_ca_cert: ${TF_VAR_CLUSTER_CERT}
  before_script:
    - cd ${TF_ROOT}
  only:
    changes:
    - ${TF_ROOT}/*
  cache:
    key: tf_state
    paths:
      - ${TF_ROOT}/.terraform

tf-init:
  stage: prepare
  extends: .terraform-base
  script:
    - gitlab-terraform init

tf-validate:
  stage: validate
  extends: .terraform-base
  script:
    - gitlab-terraform validate

tf-format:
  stage: validate
  extends: .terraform-base
  script:
    - gitlab-terraform fmt -check -diff

tf-plan:
  stage: plan
  extends: .terraform-base
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  artifacts:
    name: plan
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

tf-apply:
  stage: deploy
  extends: .terraform-base
  environment:
    name: production
  dependencies:
    - tf-plan
  script:
    - gitlab-terraform apply -auto-approve
  only:
    refs:
      - main